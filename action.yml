name: Build
description: Build project

inputs:
  platform:
    description: Platform name
    required: true
  user:
    description: Username
    required: true
  max_releases:
    description: Maximum number of old releases
    required: false
    default: '5'
  infrastructure_dir:
    description: Infrastructure directory
    required: false
    default: infrastructure
  php_version:
    description: PHP version
    required: false
    default: '8.1'
  composer_auth:
    description: Composer auth token
    required: false
  npm_auth:
    description: NPM auth token
    required: false

outputs:
  version:
    description: Build version
    value: ${{ steps.core.outputs.version }}
  build_dir:
    description: Build directory
    value: ${{ steps.core.outputs.build_dir }}
  release_dir:
    description: Release directory
    value: ${{ steps.core.outputs.release_dir }}
  install_script:
    description: Install script
    value: ${{ steps.core.outputs.install_script }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        registry-url: https://npm.pkg.github.com/

    - name: Setup NPM github token
      if: ${{ inputs.npm_auth != '' }}
      run: |
        echo '//npm.pkg.github.com/:_authToken=${{ inputs.npm_auth }}' >> .npmrc
      shell: bash

    - name: Core build
      id: core
      uses: CrowdSoft-io/action-core@v1
      with:
        platform: ${{ inputs.platform }}
        user: ${{ inputs.user }}
        max_releases: ${{ inputs.max_releases }}
        infrastructure_dir: ${{ inputs.infrastructure_dir }}

    - uses: actions/setup-go@v5
      if: ${{ steps.core.outputs.golang_build != '' }}
      with:
        go-version: '^1.19'
    - name: Golang build
      if: ${{ steps.core.outputs.golang_build != '' }}
      run: |
        bash -c '${{ steps.core.outputs.golang_build }}' && \
        tar -rf ${{ steps.core.outputs.build_dir }}/release.tar bin
      shell: bash

    - uses: shivammathur/setup-php@v2
      if: ${{ steps.core.outputs.run_composer == 'true' }}
      with:
        php-version: ${{ inputs.php_version }}
    - name: Run composer with github token
      if: ${{ steps.core.outputs.run_composer == 'true' && inputs.composer_auth != '' }}
      env:
        COMPOSER_AUTH: '{ "github-oauth": { "github.com": "${{ inputs.composer_auth }}" } }'
      run: |
        APP_ENV=prod APP_DEBUG=0 composer install -n --no-dev
        tar -rf ${{ steps.core.outputs.build_dir }}/release.tar vendor
      shell: bash
    - name: Run composer
      if: ${{ steps.core.outputs.run_composer == 'true' && inputs.composer_auth == '' }}
      run: |
        APP_ENV=prod APP_DEBUG=0 composer install -n --no-dev
        tar -rf ${{ steps.core.outputs.build_dir }}/release.tar vendor
      shell: bash
    - name: Add vendor assets
      if: ${{ inputs.platform == 'laravel' }}
      run: |
        if [[ -d "public/vendor" ]]; then
          tar -rf ${{ steps.core.outputs.build_dir }}/release.tar public/vendor
        fi
      shell: bash

    - run: gzip ${{ steps.core.outputs.build_dir }}/release.tar
      shell: bash
